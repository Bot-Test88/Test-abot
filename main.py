import os
import requests
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# imghdr ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ (Python 3.13+ ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
try:
    import imghdr
except ImportError:
    from PIL import Image
    def imghdr_what(file):
        try:
            Image.open(file)
            return 'image'
        except:
            return None
    import sys
    sys.modules['imghdr'] = type(sys)('imghdr')
    sys.modules['imghdr'].what = imghdr_what

# ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
TOKEN = os.getenv('TELEGRAM_TOKEN')
API_URL = "https://api16-normal-c-useast1a.tiktokv.com/aweme/v1/feed/"

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üé¨ TikTok Downloader Bot\n\n"
        "‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã TikTok ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨!\n\n"
        "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n"
        "https://www.tiktok.com/@username/video/123456789"
    )

def handle_link(update: Update, context: CallbackContext):
    try:
        url = update.message.text
        
        if 'tiktok.com' not in url:
            update.message.reply_text("‚ö†Ô∏è ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß TikTok ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®")
            return

        # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶ü
        if '/video/' in url:
            video_id = url.split('/video/')[1].split('?')[0]
        else:
            update.message.reply_text("‚ùå ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü")
            return

        # API ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ
        response = requests.get(f"{API_URL}?aweme_id={video_id}", timeout=10).json()
        
        if not response.get('aweme_list'):
            update.message.reply_text("‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
            return

        video_data = response['aweme_list'][0]
        video_url = video_data['video']['play_addr']['url_list'][0]
        caption = f"üìπ {video_data.get('desc', '')}\n\n‚ö° @{update.message.from_user.username}"

        # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ
        update.message.reply_video(
            video=video_url,
            caption=caption[:1000],  # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶∂‡¶® ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü
            supports_streaming=True,
            timeout=100
        )

    except requests.Timeout:
        update.message.reply_text("‚åõ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")
    except Exception as e:
        update.message.reply_text(f"üö´ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}")

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_link))
    
    # Render/Heroku ‡¶ï‡¶Æ‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶¨‡¶≤
    PORT = int(os.environ.get('PORT', 5000))
    updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://your-app-name.onrender.com/{TOKEN}"
    )
    print("ü§ñ ‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
    updater.idle()

if __name__ == '__main__':
    main()        )
    except Exception as e:
        update.message.reply_text(f"üö´ Error: {str(e)}")

# ‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_link))
    
    # Render/Heroku ‡¶ï‡¶Æ‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶¨‡¶≤
    PORT = int(os.environ.get('PORT', 5000))
    updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://your-app-name.onrender.com/{TOKEN}"
    )
    updater.idle()

if __name__ == '__main__':
    main()
